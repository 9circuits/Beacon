<?xml version="1.0" encoding="UTF-8"?>
<guide>
<title>Beacon Guide - Installing and Developing</title>
<author title="Author">Nandeep Mali</author>
<abstract>
A guide to Installing, developing and hacking on beacon.
</abstract>
<date>2009-04-30</date>
<version>1.0</version>
<chapter>
<title>Introduction</title>
<section>
<title>About Beacon</title>
<body>
<p>Beacon is a WYSIWYG web-based GuideXML editor. Beacon is aimed at being a generic XML editor, beyond just GuideXML. Any XML format that has an ultimate output format like PDF or HTML is a good candidate for a beacon-editable document. Beacon allows the user to edit the output of that XML document and will automatically generate the input corresponding to the output the user sees.</p>
</body>
</section>
<section>
<title>Requirements</title>
<body>
<p>Beacon has two backends currently: PHP and Python.</p>
<dl>
  <dt><b>PHP requirements:</b></dt>
  <dd>
      <ul>
          <li>PHP 5 or higher</li>
          <li>PHP XSL support</li>
          <li>PHP Curl support</li>
      </ul>
  </dd>
  <dt><b>Python Requirements:</b></dt>
  <dd>
    <ol>
      <li>Mix dry ingredients thoroughly</li>
      <li>Pour in wet ingredients</li>
      <li>Mix for 10 minutes</li>
      <li>Bake for one hour at 300 degrees</li>
    </ol>
  </dd>
</dl>
<p>Besides these for the PHP version you will also need to set write permission to the <path>tmp</path> directory in <path>php/storage/tmp/</path> so the web server can write to it. So make sure you are allowed to do this!</p>
</body>
</section>
</chapter>

<chapter>
<title>Installation</title>
<section>
<title>Getting PHP version of Beacon</title>
<body>
<p>Beacon is currently available only through its GIT repository. To check out an anonymous copy:</p>
<pre caption="Checking out an anonymous copy">
git clone git://git.tuxfamily.org/gitroot/beacon/trunk.git beacon
</pre>
<p>This will create a copy of Beacon in the beacon folder. If you plan on using the default PHP version then you can skip the next section. If you want to use the Python/Django version then continue below.</p>
</body>
</section>

<section>
<title>Checking out the Python version of Beacon</title>
<body>
<p>You can check out the Python version by the following sequence of commands after checking out from the repository as mentioned above.</p>
<pre caption="Shifting to the Python Branch">
$ git branch django origin/django
Branch django set up to track remote branch refs/remotes/origin/django.
$ git checkout django
Switched to branch "django"
</pre>
<p>Now you have a Python copy of Beacon.</p>
</body>
</section>

<section>
<title>Configuring Basic Beacon Setup</title>
<body>
<p>Beacon stores all its configuration in a file called beacon.conf. Navigate to your beacon directory and you will see two files. beacon.conf and beacon.conf.sample. beacon.conf.sample is a self documenting example of how a typical conf file would be. Here are the contents:</p>
<pre caption="Contents of a typical config file">
{
    <comment>// Complete URL of your Beacon installation</comment>
    "url": "http://localhost/beacon/beacondev/trunk/editor/",

    <comment>// This option chooses the backend to be used</comment>
    <comment>// Possible options: php, python</comment>
    "backend": "php",

    <comment>// All PHP related settings</comment>
    <comment>// These are mostly used by javascript</comment>
    "php": {
        <comment>// Provide all paths relative to the 'url'</comment>

        <comment>// The one that handles all of the AJAX requests</comment>
        "handler": "index.php",

        <comment>// Path to php scripts</comment>
        "path": "php/",

        <comment>// Path to all javascript</comment>
        "scriptpath": "js/",

        <comment>// Path to CSS</comment>
        "csspath": "css/",

        <comment>// Path to all images</comment>
        "imagepath": "img/",

        <comment>// Path to all plugins</comment>
        "pluginpath": "plugins/",

        <comment>// Path to store temporary files</comment>
        "tmppath": "php/storage/tmp/",

        <comment>// Path to i18n</comment>
        "i18npath": "i18n/",

        <comment>// Path to all HTML</comment>
        "htmlpath" : "html/"

    },

    <comment>// All Python related settings</comment>
    <comment>// Please clone the settings name from PHP above</comment>
    "python": {

    },

    <comment>// List the plugins here that are to be loaded</comment>
    "plugins": ["guidexml"],

    <comment>// Language to show</comment>
    "language": "en_US",

    <comment>// Container in which to display Beacon</comment>
    "container": "#container",

    <comment>// If the document is root or not.</comment>
    <comment>// This informs Beacon that it is not the "only" item</comment>
    <comment>// on the page and loads its CSS/Javascript accordingly</comment>
    "isRoot": true,

    <comment>// Choose a theme. Themes are available on the JQuery Website.</comment>
    "theme": "redmond",

    <comment>// Method of storage to be used</comment>
    <comment>// Currently only flatfile is used</comment>
    "storage": "flatfile"
}
</pre>
<p>As you can see the configuration is stored in the JSON format. This makes it easy for the Javascript to parse the config file. When you actually want to change something do it in <path>beacon.conf</path> file and not in <path>beacon.conf.sample</path>. The latter is just a reference on how to edit the file.</p>
<p>If you are using the default setup and not planning to hack on it then all you need to do is set the <c>url</c> to your setup. So if beacon is supposed to be at <path>http://www.example.com/beacon/editor</path> then set <c>url</c> to that (assuming <path>editor</path> contains the <c>.conf</c> file). This informs the javascript on where to fetch everything from.</p>
<impo>Do not forget the trailing slashes in the settings. They are crucial! Assume this for all settings that involve paths.</impo>
<p>Now we'll move to backend specific configs.</p>
</body>
</section>

<section>
<title>PHP Specific settings</title>
<body>
<p>There is one more variable you need to set in index.php file in <path>beacon/editor/index.php</path>. Open <path>index.php</path> in your favorite editor and navigate to around line number 18 which says:</p>
<pre caption="index.php">
.
.
.
<comment>// Set the full path here</comment>
<ident>$fullPath</ident> = <const>"/some/path/"</const>;
.
.
.
</pre>
<p>Change this to the absolute path of beacon folder on your system.</p>
<p>Now navigate to <path>beacon/editor/php/storage/</path> and set the permissions of <path>tmp/</path> folder (if doesn't exist create one) so that the webserver can write to it. This is used to write the documents to server. Beacon(PHP) doesn't support any other method of storage except flatfiles.</p>
</body>
</section>

<section>
<title>Python settings</title>
<body>
<p>It just works. No? XD</p>
</body>
</section>

</chapter>

<chapter>
<title>Using Beacon</title>
<section>
<title>Running Beacon</title>
<body>
<p>Assuming everything went well above just point you browser to the <c>url</c> you have give above and Beacon should be appearing in front of you.</p>
<p>More on this later...</p>
</body>
</section>
</chapter>


<chapter>
<title>Hacking on Beacon</title>
<section>
<title>Introduction</title>
<body>
<p>Beacon is currently in its experimental stages and needs a lot more development. If you'd like to join the bandwagon please grab a cup of your favorite brew and drop by at #beacon on irc.freenode.net. :)</p>
<p>This part of the guide will detail on how to hack on Beacon in 2 different areas. Making a new backend and making a plugin.</p>
</body>
</section>

<section>
<title>Developing a new Backend</title>
<body>
<p>Javascript frontend of beacon is quite independent of its backend. It uses the conf file to look for resources and throwing ajax requests to the server. For the purpose of this tutorial I'll guide you based on the PHP example. Beacon is contained in <path>/var/www/beacon/editor/</path> and <c>url</c> looks like <path>http://localhost/beacon/editor/</path> are my assumptions.</p>
<p>When the browser accesses the above url index.php loads the config file and serves <path>/var/www/beacon/editor/html/beaconfull.html</path> (all strings surrounded by {} are the ones that need to be localized). The following code in beaconfull.html is what starts the javascript magic:</p>
<pre caption="beaconfull.html">
&lt;script type="text/javascript"&gt;
    <comment>// This is important to make the fileupload work!</comment>
    <ident>window.beacon</ident> = {};

    $(document).ready(function() {
        <comment>// Start up Beacon by showing the Container</comment>
        <ident>beacon</ident> = <keyword>new</keyword> <ident>Beacon</ident>(<const>"#BeaconContainer"</const>, <const>"{pathtoconf}"</const>);
    });

&lt;/script&gt;
</pre>
<p><const>"#BeaconContainer"</const> is the HTML element in which you would like to load beacon and <const>"{pathtoconf}"</const> is where you would supply a full HTTP path to the conf file so Beacon can load it via Ajax. Your backend should typically provide this while serving this page by reading it from beacon.conf file and replacing <const>"{pathtoconf}"</const>. It would be at <path>http://localhost/beacon/editor/beacon.conf</path> in the case of this tutorial.</p>
<p>After the page has loaded and config file is loaded the JS will make calls for fetching remaining scripts. All the paths are calculated by reading the conf variable. As you can see, the php section contains a lot of paths. Beacon 'boots' up in the following sequence:</p>
<ol>
    <li>Fetch the conf file</li>
    <li>Fetch the language file from i18npath</li>
    <li>Fetch extra javascript from scriptpath</li>
    <li>Fetch Plugin data from pluginpath</li>
    <li>Fetch the main UI HTML by requesting to the handler (in case of PHP its <path>index.php</path>). Hereon, all requests are made to the handler.</li>
</ol>
<impo>All paths are calculated by adding the url in front of the path value. Hence give it accordingly.</impo>
<p>The page mentioned in handler is what handles all Javascript requests. The following section documents all calls made to the handler and associated return values.</p>
</body>
</section>

<section>
<title>Ajax Calls</title>
<body>
<p>Following code snippets describe all the Ajax calls made to the handler. This list will continue to grow.</p>

<p>Fetching the UI.</p>
<pre caption="UI Fetch">
<ident>json</ident> = {
    <ident>action</ident>: <const>"beaconui"</const>,
    <ident>payload</ident>: <keyword>null</keyword>
}
<comment>// Return value should be localized HTML that is to be displayed (contained in beaconui.html).</comment>
</pre>

<p>Creating a new document with the given <ident>id</ident>.</p>
<pre caption="New Document">
<ident>json</ident> = {
    <ident>action</ident>: <const>"newdoc"</const>,
    <ident>payload</ident>: {
        <ident>id</ident>: <comment>/* Document ID */</comment>,
        <ident>plugin</ident>: <comment>/* Plugin Name */</comment>
    }
}
<comment>// Return value should be the localized HTML contained in document.html. One has to create a new document in this case.</comment>
</pre>

<impo>The HTML in document.html has two values that need to be filled up. All element ids in the HTML are prefixed with {id} which needs to be replaced with the id given in the json. Also the Iframe has {src} in its attribute which needs to point to the URL that will serve the html document on the initial load. This needs to be done to all HTML contained in document.html henceforth.</impo>

<p>Fetching a Document UI. The difference between this and above is that no new document is created. A UI is returned with simply a reference to the document mentioned by <ident>id</ident>.</p>
<pre caption="Document UI Fetch">
<ident>json</ident> = {
    <ident>action</ident>: <const>"documentui"</const>,
    <ident>payload</ident>: {
        <ident>id</ident>: <comment>/* Document ID */</comment>,
        <ident>plugin</ident>: <comment>/* Plugin Name */</comment>
    }
}
<comment>// Return value should be the localized HTML contained in document.html. One should not create a new document.</comment>
</pre>

<p>Fetching the Document from a URL and creating a doc with that source and given <ident>id</ident>.</p>
<pre caption="Fetching from URL">
<ident>json</ident> = {
    <ident>action</ident>: <const>"documentui"</const>,
    <ident>payload</ident>: {
        <ident>id</ident>: <comment>/* Document ID */</comment>,
        <ident>plugin</ident>: <comment>/* Plugin Name */</comment>,
        <ident>url</ident>: <comment>/* URL from where the document source is to be fetched. */</comment>
    }
}
<comment>// The server should grab the source XML from the URL provided and serve
// the document ui from document.html in the same way as done before.</comment>
</pre>

<p>Deleting a doc for given <ident>id</ident>.</p>
<pre caption="Deleting a doc">
<ident>json</ident> = {
    <ident>action</ident>: <const>"deletdoc"</const>,
    <ident>payload</ident>: {
        <ident>id</ident>: <comment>/* Document ID */</comment>,
        <ident>plugin</ident>: <comment>/* Plugin Name */</comment>
    }
}
<comment>// The server should delete the document from storage.</comment>
</pre>

<p>Fetching the XML for given <ident>id</ident>.</p>
<pre caption="Fetching Source">
<ident>json</ident> = {
    <ident>action</ident>: <const>"getsrc"</const>,
    <ident>payload</ident>: {
        <ident>id</ident>: <comment>/* Document ID */</comment>,
        <ident>plugin</ident>: <comment>/* Plugin Name */</comment>,
        <ident>html</ident>: <comment>/* Complete HTML string from Iframe (escaped) */</comment>
    }
}
<comment>// The server should parse the HTML and return XML.</comment>
</pre>

<p>Fetching the displayable HTML for given <ident>id</ident>.</p>
<pre caption="Fetching HTML">
<ident>json</ident> = {
    <ident>action</ident>: <const>"gethtml"</const>,
    <ident>payload</ident>: {
        <ident>id</ident>: <comment>/* Document ID */</comment>,
        <ident>plugin</ident>: <comment>/* Plugin Name */</comment>,
        <ident>src</ident>: <comment>/* Complete source XML string from Source view (escaped) */</comment>
    }
}
<comment>// The server should parse the XML and return displayable HTML.</comment>
</pre>

<p>More to come soon...</p>
</body>
</section>

<section>
<title>Writing a plugin</title>
<body>
<p>Beacon has a plugin framework to make it a generic XML editor. More to come soon...</p>
</body>
</section>

</chapter>

</guide>